var searchIndex = JSON.parse('{\
"recursion":{"doc":"Tools for working with recursive data structures in a …","t":"IIIIQQQIELLKKLLKLKKKLLL","n":["Collapsible","CollapsibleExt","Expandable","ExpandableExt","Frame","FrameToken","FrameToken","MappableFrame","PartiallyApplied","borrow","borrow_mut","collapse_frames","expand_frames","fmt","from","from_frame","into","into_frame","map_frame","try_collapse_frames","try_from","try_into","type_id"],"q":[[0,"recursion"]],"d":["The ability to recursively collapse some type into some …","","The ability to recursively expand a seed to construct a …","","the frame type that is mapped over by <code>map_frame</code>","","","A single ‘frame’ containing values that can be mapped …","“An uninhabited type used to define <code>MappableFrame</code> …","","","Given an instance of this type, collapse it into a single …","Given a value of type <code>In</code>, expand it to generate a value of …","","Returns the argument unchanged.","Given a frame holding instances of <code>Self</code>, generate an …","Calls <code>U::from(self)</code>.","Given an instance of this type, generate a frame holding …","Apply some function <code>f</code> to each element inside a frame","Given an instance of this type, collapse it into a single …","","",""],"i":[0,0,0,0,7,8,9,0,0,2,2,10,11,2,2,9,2,8,7,10,2,2,2],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[1],[1],[[2,3],4],[[]],[[]],[[]],[[]],[1],[1,5],[[],5],[[],5],[[],6]],"c":[],"p":[[8,"FnMut"],[4,"PartiallyApplied"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"MappableFrame"],[8,"Collapsible"],[8,"Expandable"],[8,"CollapsibleExt"],[8,"ExpandableExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
